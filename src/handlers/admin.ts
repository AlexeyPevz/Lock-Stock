import { Context, InlineKeyboard } from "grammy";
import { ConfigManager } from "../config/manager";
import { logger } from "../utils/logger";
import { SessionFlavor } from "grammy";
import { Session } from "../types";

export interface AdminHandlerDeps {
  adminIds: Set<number>;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export function isAdmin(ctx: Context, deps: AdminHandlerDeps): boolean {
  const userId = ctx.from?.id;
  return userId ? deps.adminIds.has(userId) : false;
}

// –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
export async function handleAdminMenu(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) {
    await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
    return;
  }

  const keyboard = new InlineKeyboard()
    .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏", "admin_model")
    .text("üìù –ü—Ä–æ–º–ø—Ç —Å–∏—Å—Ç–µ–º—ã", "admin_prompt")
    .row()
    .text("üéÆ –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "admin_game")
    .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "admin_notifications")
    .row()
    .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats")
    .text("üõ†Ô∏è –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "admin_maintenance")
    .row()
    .text("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "admin_close");

  await ctx.reply(
    "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
export async function handleAdminModel(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const modelConfig = config.getModelConfig();

  const keyboard = new InlineKeyboard()
    .text("ü§ñ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "admin_model_change")
    .text("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "admin_model_temp")
    .row()
    .text("üîÑ –ü–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "admin_model_attempts")
    .text("üß¨ SGR —Ä–µ–∂–∏–º", "admin_model_sgr")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ AI*\n\n` +
    `ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: \`${modelConfig.model}\`\n` +
    `üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${modelConfig.temperature}\n` +
    `üîÑ –ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫: ${modelConfig.maxAttempts}`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
export async function handleAdminModelChange(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const models = [
    { name: "üÜì Mistral 7B (Free)", id: "mistralai/mistral-7b-instruct:free" },
    { name: "DeepSeek Chat", id: "deepseek/deepseek-chat" },
    { name: "Claude 3 Haiku", id: "anthropic/claude-3-haiku" },
    { name: "GPT-4 Turbo", id: "openai/gpt-4-turbo-preview" },
    { name: "Mixtral 8x7B", id: "mistralai/mixtral-8x7b-instruct" },
    { name: "Llama 3.1 70B", id: "meta-llama/llama-3.1-70b-instruct" },
    { name: "Qwen 2.5 72B", id: "qwen/qwen-2.5-72b-instruct" },
  ];

  const keyboard = new InlineKeyboard();
  
  for (const model of models) {
    keyboard.text(model.name, `admin_set_model:${model.id}`).row();
  }
  
  keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_model");

  await ctx.editMessageText(
    "*–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å AI:*\n\n" +
    "_–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º OpenRouter –∞–∫–∫–∞—É–Ω—Ç–µ_",
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
export async function handleAdminSetModel(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, modelId: string) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    config.set("openRouterModel", modelId);

    await ctx.answerCallbackQuery("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞");
    await handleAdminModel(ctx, deps);
  } catch (error) {
    logger.error("Failed to set model", { error });
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏");
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
export async function handleAdminPrompt(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const currentPrompt = config.get("systemPrompt");
  const isCustom = !!currentPrompt;

  const keyboard = new InlineKeyboard()
    .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", "admin_prompt_edit")
    .text("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π", "admin_prompt_reset")
    .row()
    .text("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π", "admin_prompt_show")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞*\n\n` +
    `–°—Ç–∞—Ç—É—Å: ${isCustom ? "‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π" : "üìÑ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"}\n\n` +
    `_–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ AI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤_`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
export async function handleAdminPromptEdit(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "editing_prompt";
  
  await ctx.editMessageText(
    "*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞*\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n" +
    "_–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel_",
    { parse_mode: "Markdown" }
  );
}

// –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export async function handleAdminGame(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();

  const keyboard = new InlineKeyboard()
    .text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã", "admin_game_free")
    .text("üíé –ü—Ä–µ–º–∏—É–º —Ä–∞—É–Ω–¥—ã", "admin_game_premium")
    .row()
    .text("üì¶ –ü–∞–∫–µ—Ç—ã –∏ —Ü–µ–Ω—ã", "admin_packages")
    .text("‚è±Ô∏è –¢–∞–π–º–µ—Ä—ã", "admin_timers")
    .row()
    .text("üö´ –õ–∏–º–∏—Ç—ã", "admin_limits")
    .text("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", "admin_game_verify")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*–ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n` +
    `üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤: ${config.get("freeRounds")}\n` +
    `üíé –ü—Ä–µ–º–∏—É–º —Ä–∞—É–Ω–¥–æ–≤: ${config.get("premiumRounds")}\n` +
    `‚è±Ô∏è –¢–∞–π–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${config.get("defaultTimerSeconds")}—Å\n` +
    `üö´ –õ–∏–º–∏—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤: ${config.get("skipLimit")}\n` +
    `‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${config.get("verificationEnabled") ? "–í–∫–ª—é—á–µ–Ω–∞" : "–í—ã–∫–ª—é—á–µ–Ω–∞"}`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
export async function handleAdminStats(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const { getStatsCollector } = await import("../stats/collector");
    const { generationStats } = await import("../generation/sgr-generator");
    
    const collector = getStatsCollector();
    const stats = await collector.getStats();
    const genStats = generationStats.getStats();

    const keyboard = new InlineKeyboard()
      .text("üìà –ì—Ä–∞—Ñ–∏–∫–∏", "admin_stats_charts")
      .text("ü§ñ AI –º–µ—Ç—Ä–∏–∫–∏", "admin_stats_ai")
      .row()
      .text("üí∞ –§–∏–Ω–∞–Ω—Å—ã", "admin_stats_finance")
      .text("üéÆ –ò–≥—Ä–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "admin_stats_games")
      .row()
      .text("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "admin_stats")
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

    const statsText = [
      `*üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*`,
      ``,
      `*üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*`,
      `‚îú –í—Å–µ–≥–æ: ${stats.totalUsers}`,
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.activeUsersToday}`,
      `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.activeUsersWeek}`,
      `‚îú –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.newUsersToday}`,
      `‚îî –ü—Ä–µ–º–∏—É–º: ${stats.premiumUsers}`,
      ``,
      `*üéÆ –ò–≥—Ä—ã –∏ —Ä–∞—É–Ω–¥—ã*`,
      `‚îú –í—Å–µ–≥–æ –∏–≥—Ä: ${stats.totalGames}`,
      `‚îú –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: ${stats.totalRounds}`,
      `‚îú –†–∞—É–Ω–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.roundsToday}`,
      `‚îú –†–∞—É–Ω–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.roundsWeek}`,
      `‚îî –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—É–Ω–¥–æ–≤/–∏–≥—Ä—É: ${stats.avgRoundsPerGame}`,
      ``,
      `*ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–ë–î)*`,
      `‚îú –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${stats.totalGenerations}`,
      `‚îú –°–µ–≥–æ–¥–Ω—è: ${stats.generationsToday}`,
      `‚îú –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.generationSuccessRate}`,
      `‚îî –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${stats.avgGenerationTime}–º—Å`,
      ``,
      `*ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–°–µ—Å—Å–∏—è)*`,
      `‚îú –í—Å–µ–≥–æ: ${genStats.total}`,
      `‚îú –£—Å–ø–µ—à–Ω—ã—Ö: ${genStats.successful}`,
      `‚îî –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${genStats.successRate}`,
      ``,
      `*‚è±Ô∏è –°–∏—Å—Ç–µ–º–∞*`,
      `‚îî –ê–ø—Ç–∞–π–º: ${stats.uptimeHours}—á`
    ].join('\n');

    await ctx.editMessageText(statsText, { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    });
  } catch (error) {
    logger.error("Failed to get stats", { error });
    
    const keyboard = new InlineKeyboard()
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");
      
    await ctx.editMessageText(
      `*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n` +
      `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n` +
      `_–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω_`,
      { 
        parse_mode: "Markdown",
        reply_markup: keyboard 
      }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ
export async function handleAdminTextInput(
  ctx: Context & SessionFlavor<Session>, 
  deps: AdminHandlerDeps
) {
  if (!isAdmin(ctx, deps) || !ctx.session.adminMode || !ctx.message?.text) return false;

  const text = ctx.message.text;
  const mode = ctx.session.adminMode;

  // –û—Ç–º–µ–Ω–∞
  if (text === "/cancel") {
    ctx.session.adminMode = undefined;
    ctx.session.adminData = undefined;
    await ctx.reply("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    return true;
  }

  const config = ConfigManager.getInstance();

  switch (mode) {
    case "editing_prompt":
      try {
        config.set("systemPrompt", text);
        ctx.session.adminMode = undefined;
        
        await ctx.reply(
          "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n" +
          "–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
        );
        return true;
      } catch (error) {
        logger.error("Failed to update prompt", { error });
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞");
        return true;
      }

    case "setting_temperature":
      try {
        const temp = parseFloat(text);
        if (isNaN(temp) || temp < 0 || temp > 2) {
          await ctx.reply("‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 2");
          return true;
        }

        config.set("temperature", temp);
        ctx.session.adminMode = undefined;
        
        await ctx.reply(`‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${temp}`);
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã");
        return true;
      }

    case "setting_free_rounds":
    case "setting_premium_rounds":
      try {
        const rounds = parseInt(text);
        if (isNaN(rounds) || rounds < 1) {
          await ctx.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
          return true;
        }

        const key = mode === "setting_free_rounds" ? "freeRounds" : "premiumRounds";
        config.set(key, rounds);
        ctx.session.adminMode = undefined;
        
        await ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: ${rounds}`);
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤");
        return true;
      }

    case "setting_package_name":
    case "setting_package_rounds":
    case "setting_package_price":
      try {
        const packageId = ctx.session.adminData as string;
        if (!packageId) {
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞: ID –ø–∞–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
          return true;
        }

        let updates: any = {};
        
        if (mode === "setting_package_name") {
          updates.name = text;
        } else if (mode === "setting_package_rounds") {
          const rounds = parseInt(text);
          if (isNaN(rounds) || rounds < 1) {
            await ctx.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
            return true;
          }
          updates.rounds = rounds;
        } else {
          const price = parseInt(text);
          if (isNaN(price) || price < 1) {
            await ctx.reply("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
            return true;
          }
          updates.priceStars = price;
        }

        config.updatePackage(packageId, updates);
        ctx.session.adminMode = undefined;
        ctx.session.adminData = undefined;
        
        await ctx.reply("‚úÖ –ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞");
        return true;
      }

    case "setting_timer":
      try {
        const seconds = parseInt(text);
        const key = ctx.session.adminData as string;
        
        if (isNaN(seconds) || seconds < 10) {
          await ctx.reply("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥");
          return true;
        }

        config.set(key as any, seconds);
        ctx.session.adminMode = undefined;
        ctx.session.adminData = undefined;
        
        await ctx.reply(`‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${seconds} —Å–µ–∫`);
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞");
        return true;
      }

    case "setting_limit":
      try {
        const limit = parseInt(text);
        const key = ctx.session.adminData as string;
        
        if (isNaN(limit) || limit < 0) {
          await ctx.reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
          return true;
        }

        config.set(key as any, limit);
        ctx.session.adminMode = undefined;
        ctx.session.adminData = undefined;
        
        await ctx.reply(`‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${limit}`);
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞");
        return true;
      }

    case "editing_welcome":
      try {
        config.set("welcomeMessage", text);
        ctx.session.adminMode = undefined;
        
        await ctx.reply("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
        return true;
      }

    case "editing_maintenance":
      try {
        config.set("maintenanceMessage", text);
        ctx.session.adminMode = undefined;
        
        await ctx.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
        return true;
      }
  }

  return false;
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
export async function handleAdminClose(ctx: Context) {
  await ctx.deleteMessage();
}

export async function handleAdminPromptReset(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    config.set("systemPrompt", undefined);
    
    await ctx.answerCallbackQuery("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π");
    await handleAdminPrompt(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–º–ø—Ç–∞");
  }
}

export async function handleAdminPromptShow(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const prompt = config.getSystemPrompt();
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —á–∞—Å—Ç–∏
  const maxLength = 4000;
  if (prompt.length > maxLength) {
    const parts = Math.ceil(prompt.length / maxLength);
    for (let i = 0; i < parts; i++) {
      const start = i * maxLength;
      const end = Math.min(start + maxLength, prompt.length);
      const part = prompt.substring(start, end);
      
      await ctx.reply(
        `*–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—á–∞—Å—Ç—å ${i + 1}/${parts}):*\n\n\`\`\`\n${part}\n\`\`\``,
        { parse_mode: "Markdown" }
      );
    }
  } else {
    await ctx.reply(
      `*–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:*\n\n\`\`\`\n${prompt}\n\`\`\``,
      { parse_mode: "Markdown" }
    );
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
export async function handleAdminModelTemp(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_temperature";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã*\n\n" +
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å AI:\n" +
    "‚Ä¢ 0.0 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã\n" +
    "‚Ä¢ 0.7 - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n" +
    "‚Ä¢ 2.0 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 2:",
    { parse_mode: "Markdown" }
  );
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø—ã—Ç–æ–∫
export async function handleAdminModelAttempts(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const keyboard = new InlineKeyboard();
  
  for (let i = 1; i <= 10; i++) {
    keyboard.text(i.toString(), `admin_set_attempts:${i}`);
    if (i % 5 === 0) keyboard.row();
  }
  
  keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_model");

  await ctx.editMessageText(
    "*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*\n\n" +
    "–ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ø—Ä–æ–±—É–µ—Ç –µ—â–µ —Ä–∞–∑.\n" +
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:",
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

export async function handleAdminSetAttempts(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, attempts: number) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    config.set("maxAttempts", attempts);
    
    await ctx.answerCallbackQuery(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: ${attempts}`);
    await handleAdminModel(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ø—ã—Ç–æ–∫");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö/–ø—Ä–µ–º–∏—É–º —Ä–∞—É–Ω–¥–æ–≤
export async function handleAdminGameFree(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_free_rounds";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n" +
    "_–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + ConfigManager.getInstance().get("freeRounds") + "_\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

export async function handleAdminGamePremium(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_premium_rounds";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–º–∏—É–º —Ä–∞—É–Ω–¥–æ–≤*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n" +
    "_–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + ConfigManager.getInstance().get("premiumRounds") + "_\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export async function handleAdminGameVerify(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    const newValue = !config.get("verificationEnabled");
    config.set("verificationEnabled", newValue);
    
    await ctx.answerCallbackQuery(
      newValue ? "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞" : "‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞"
    );
    await handleAdminGame(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞–º–∏
export async function handleAdminPackages(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const packages = config.getPackages();

  const keyboard = new InlineKeyboard();
  
  for (const pkg of packages) {
    keyboard.text(
      `${pkg.name} (${pkg.rounds} –≤–æ–ø—Ä–æ—Å–æ–≤ - ${pkg.priceStars}‚≠ê)`,
      `admin_package:${pkg.id}`
    ).row();
  }
  
  keyboard
    .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç", "admin_package_add")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_game");

  await ctx.editMessageText(
    "*üì¶ –ò–≥—Ä–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã*\n\n" +
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
export async function handleAdminPackageEdit(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, packageId: string) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const pkg = config.getPackage(packageId);
  
  if (!pkg) {
    await ctx.answerCallbackQuery("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  const keyboard = new InlineKeyboard()
    .text("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", `admin_pkg_name:${packageId}`)
    .text("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", `admin_pkg_rounds:${packageId}`)
    .row()
    .text("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", `admin_pkg_price:${packageId}`)
    .text(pkg.isActive ? "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" : "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", `admin_pkg_toggle:${packageId}`)
    .row()
    .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∞–∫–µ—Ç", `admin_pkg_delete:${packageId}`)
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_packages");

  await ctx.editMessageText(
    `*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞*\n\n` +
    `üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: ${pkg.name}\n` +
    `üî¢ –í–æ–ø—Ä–æ—Å–æ–≤: ${pkg.rounds}\n` +
    `üí∞ –¶–µ–Ω–∞: ${pkg.priceStars} ‚≠ê\n` +
    `üìä –°—Ç–∞—Ç—É—Å: ${pkg.isActive ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}\n` +
    (pkg.description ? `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${pkg.description}` : ""),
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞–º–∏
export async function handleAdminTimers(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();

  const keyboard = new InlineKeyboard()
    .text("‚è±Ô∏è –¢–∞–π–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "admin_timer_default")
    .text("‚è∞ –ú–∞–∫—Å. —Ç–∞–π–º–µ—Ä", "admin_timer_max")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_game");

  await ctx.editMessageText(
    `*‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤*\n\n` +
    `–¢–∞–π–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${config.get("defaultTimerSeconds")} —Å–µ–∫\n` +
    `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä: ${config.get("maxTimerSeconds")} —Å–µ–∫`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏
export async function handleAdminLimits(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();

  const keyboard = new InlineKeyboard()
    .text("üéÆ –ú–∞–∫—Å. —Ä–∞—É–Ω–¥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏", "admin_limit_session")
    .text("üö´ –õ–∏–º–∏—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤", "admin_limit_skip")
    .row()
    .text("üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", "admin_limit_daily")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_game");

  await ctx.editMessageText(
    `*üö´ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤*\n\n` +
    `üéÆ –ú–∞–∫—Å. —Ä–∞—É–Ω–¥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: ${config.get("maxSessionRounds")}\n` +
    `üö´ –õ–∏–º–∏—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤: ${config.get("skipLimit")}\n` +
    `üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: ${config.get("maxDailyGenerations")}`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
export async function handleAdminNotifications(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();

  const keyboard = new InlineKeyboard()
    .text(
      config.get("adminNotifications") ? "üîî –í—ã–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" : "üîï –í–∫–ª. —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      "admin_toggle_notifications"
    )
    .row()
    .text("üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "admin_edit_welcome")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n` +
    `–ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${config.get("adminNotifications") ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"}\n\n` +
    `_–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å_`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
export async function handleAdminMaintenance(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const isEnabled = config.get("maintenanceMode");

  const keyboard = new InlineKeyboard()
    .text(
      isEnabled ? "üü¢ –í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º" : "üî¥ –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º",
      "admin_toggle_maintenance"
    )
    .row()
    .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "admin_edit_maintenance")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*üõ†Ô∏è –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è*\n\n` +
    `–°—Ç–∞—Ç—É—Å: ${isEnabled ? "üî¥ –í–∫–ª—é—á–µ–Ω" : "üü¢ –í—ã–∫–ª—é—á–µ–Ω"}\n\n` +
    `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n_${config.get("maintenanceMessage")}_`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
export async function handleAdminToggleMaintenance(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    const newValue = !config.get("maintenanceMode");
    config.set("maintenanceMode", newValue);
    
    await ctx.answerCallbackQuery(
      newValue ? "üî¥ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω" : "üü¢ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω"
    );
    await handleAdminMaintenance(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
  }
}

export async function handleAdminToggleNotifications(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    const newValue = !config.get("adminNotifications");
    config.set("adminNotifications", newValue);
    
    await ctx.answerCallbackQuery(
      newValue ? "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" : "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã"
    );
    await handleAdminNotifications(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
  }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
export async function handleAdminEditWelcome(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "editing_welcome";
  
  const current = ConfigManager.getInstance().get("welcomeMessage");
  
  await ctx.editMessageText(
    "*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n" +
    "–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" +
    `_${current || "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"}_\n\n` +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

export async function handleAdminEditMaintenance(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "editing_maintenance";
  
  await ctx.editMessageText(
    "*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏*\n\n" +
    "–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n" +
    `_${ConfigManager.getInstance().get("maintenanceMessage")}_\n\n` +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤
export async function handleAdminPackageName(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, packageId: string) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_package_name";
  ctx.session.adminData = packageId;
  
  await ctx.editMessageText(
    "*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞.\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

export async function handleAdminPackageRounds(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, packageId: string) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_package_rounds";
  ctx.session.adminData = packageId;
  
  await ctx.editMessageText(
    "*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ.\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

export async function handleAdminPackagePrice(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, packageId: string) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_package_price";
  ctx.session.adminData = packageId;
  
  await ctx.editMessageText(
    "*–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–∞–∫–µ—Ç–∞*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –∑–≤–µ–∑–¥–∞—Ö Telegram (Stars).\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

export async function handleAdminPackageToggle(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, packageId: string) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    const pkg = config.getPackage(packageId);
    if (!pkg) {
      await ctx.answerCallbackQuery("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    config.updatePackage(packageId, { isActive: !pkg.isActive });
    
    await ctx.answerCallbackQuery(
      pkg.isActive ? "‚ùå –ü–∞–∫–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚úÖ –ü–∞–∫–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    );
    await handleAdminPackageEdit(ctx, deps, packageId);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞");
  }
}

export async function handleAdminPackageDelete(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, packageId: string) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    config.removePackage(packageId);
    
    await ctx.answerCallbackQuery("üóëÔ∏è –ü–∞–∫–µ—Ç —É–¥–∞–ª–µ–Ω");
    await handleAdminPackages(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
export async function handleAdminTimerDefault(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_timer";
  ctx.session.adminData = "defaultTimerSeconds";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ—Ç 10 –¥–æ 300).\n\n" +
    "_–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + ConfigManager.getInstance().get("defaultTimerSeconds") + " —Å–µ–∫_\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

export async function handleAdminTimerMax(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_timer";
  ctx.session.adminData = "maxTimerSeconds";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ—Ç 60 –¥–æ 600).\n\n" +
    "_–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + ConfigManager.getInstance().get("maxTimerSeconds") + " —Å–µ–∫_\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤
export async function handleAdminLimitSession(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_limit";
  ctx.session.adminData = "maxSessionRounds";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞—É–Ω–¥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.\n\n" +
    "_–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + ConfigManager.getInstance().get("maxSessionRounds") + "_\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

export async function handleAdminLimitSkip(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_limit";
  ctx.session.adminData = "skipLimit";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é.\n\n" +
    "_–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + ConfigManager.getInstance().get("skipLimit") + "_\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

export async function handleAdminLimitDaily(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_limit";
  ctx.session.adminData = "maxDailyGenerations";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π*\n\n" +
    "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å.\n\n" +
    "_–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + ConfigManager.getInstance().get("maxDailyGenerations") + "_\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    { parse_mode: "Markdown" }
  );
}

// –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI
export async function handleAdminStatsAI(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const { generationStats } = await import("../generation/sgr-generator");
    const genStats = generationStats.getStats();
    
    const keyboard = new InlineKeyboard()
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_stats");

    let statsText = `*ü§ñ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI*\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
    statsText += `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º:*\n`;
    for (const [model, data] of Object.entries(genStats.byModel)) {
      const modelData = data as any;
      statsText += `\n*${model}*\n`;
      statsText += `‚îú –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${modelData.total}\n`;
      statsText += `‚îú –£—Å–ø–µ—à–Ω—ã—Ö: ${modelData.success}\n`;
      statsText += `‚îú –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${modelData.successRate}\n`;
      statsText += `‚îú –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${Math.round(modelData.avgDuration)}–º—Å\n`;
      statsText += `‚îî –°—Ä–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏: ${modelData.avgAttempts.toFixed(1)}\n`;
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (genStats.recentErrors.length > 0) {
      statsText += `\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:*\n`;
      genStats.recentErrors.slice(0, 5).forEach((err: any) => {
        statsText += `‚Ä¢ ${err.model}: ${err.error}\n`;
      });
    }

    await ctx.editMessageText(statsText, { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    });
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
}

// –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
export async function handleAdminStatsFinance(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const { getStatsCollector } = await import("../stats/collector");
    const collector = getStatsCollector();
    const stats = await collector.getStats();
    
    const keyboard = new InlineKeyboard()
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_stats");

    let statsText = `*üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n`;
    
    statsText += `*–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n`;
    statsText += `‚îú –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.totalRevenue} ‚≠ê\n`;
    statsText += `‚îú –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: ${stats.revenueToday} ‚≠ê\n`;
    statsText += `‚îî –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.premiumUsers}\n\n`;
    
    statsText += `*–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–∞–∫–µ—Ç–∞–º:*\n`;
    const config = ConfigManager.getInstance();
    const packages = config.getPackages();
    
    for (const pkg of packages) {
      const sold = stats.packagesSold[pkg.id] || 0;
      const revenue = sold * pkg.priceStars;
      statsText += `\n*${pkg.name}*\n`;
      statsText += `‚îú –ü—Ä–æ–¥–∞–Ω–æ: ${sold}\n`;
      statsText += `‚îú –¶–µ–Ω–∞: ${pkg.priceStars} ‚≠ê\n`;
      statsText += `‚îî –î–æ—Ö–æ–¥: ${revenue} ‚≠ê\n`;
    }

    await ctx.editMessageText(statsText, { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    });
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
}

// –ò–≥—Ä–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
export async function handleAdminStatsGames(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const { getStatsCollector } = await import("../stats/collector");
    const collector = getStatsCollector();
    const stats = await collector.getStats();
    
    const keyboard = new InlineKeyboard()
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_stats");

    let statsText = `*üéÆ –ò–≥—Ä–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*\n\n`;
    
    statsText += `*–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n`;
    statsText += `‚îú –í—Å–µ–≥–æ –∏–≥—Ä: ${stats.totalGames}\n`;
    statsText += `‚îú –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: ${stats.totalRounds}\n`;
    statsText += `‚îú –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—É–Ω–¥–æ–≤/–∏–≥—Ä—É: ${stats.avgRoundsPerGame}\n`;
    statsText += `‚îú –ü—Ä–æ–ø—É—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${stats.skipUsage}\n`;
    statsText += `‚îî –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${stats.avgRating.toFixed(1)} (${stats.totalRatings} –æ—Ü–µ–Ω–æ–∫)\n\n`;
    
    statsText += `*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n`;
    statsText += `‚îú –†–∞—É–Ω–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.roundsToday}\n`;
    statsText += `‚îú –†–∞—É–Ω–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.roundsWeek}\n`;
    statsText += `‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.activeUsersWeek}\n\n`;
    
    statsText += `*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n`;
    const sortedCommands = Object.entries(stats.commandUsage)
      .sort(([,a], [,b]) => (b as number) - (a as number))
      .slice(0, 5);
    
    for (const [cmd, count] of sortedCommands) {
      statsText += `‚îú /${cmd}: ${count}\n`;
    }

    await ctx.editMessageText(statsText, { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    });
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
}

// –ì—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function handleAdminStatsCharts(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const keyboard = new InlineKeyboard()
    .text("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (7–¥)", "admin_chart:users:7")
    .text("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (30–¥)", "admin_chart:users:30")
    .row()
    .text("üéÆ –†–∞—É–Ω–¥—ã (7–¥)", "admin_chart:rounds:7")
    .text("üéÆ –†–∞—É–Ω–¥—ã (30–¥)", "admin_chart:rounds:30")
    .row()
    .text("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ (7–¥)", "admin_chart:generations:7")
    .text("üí∞ –î–æ—Ö–æ–¥ (7–¥)", "admin_chart:revenue:7")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_stats");

  await ctx.editMessageText(
    `*üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n` +
    `_–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ_`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
export async function handleAdminChart(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, metric: string, days: string) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const { getStatsCollector } = await import("../stats/collector");
    const collector = getStatsCollector();
    const chartData = await collector.getChartData(metric, parseInt(days));
    
    const keyboard = new InlineKeyboard()
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_stats_charts");

    let chartText = `*üìä –ì—Ä–∞—Ñ–∏–∫: ${getMetricName(metric)} (${days} –¥–Ω–µ–π)*\n\n`;
    
    if (chartData.length === 0) {
      chartText += "_–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥_";
    } else {
      // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
      const maxValue = Math.max(...chartData.map((d: any) => d.value || 0));
      const scale = maxValue > 0 ? 20 / maxValue : 1;
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      for (const row of chartData) {
        const data = row as any;
        const date = new Date(data.date).toLocaleDateString('ru-RU', { 
          month: 'short', 
          day: 'numeric' 
        });
        const value = data.value || 0;
        const barLength = Math.round(value * scale);
        const bar = '‚ñà'.repeat(Math.max(1, barLength));
        
        chartText += `${date}: ${bar} ${value}\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
      const total = chartData.reduce((sum: number, d: any) => sum + (d.value || 0), 0);
      const avg = chartData.length > 0 ? (total / chartData.length).toFixed(1) : 0;
      
      chartText += `\n*–ò—Ç–æ–≥–æ:* ${total}\n`;
      chartText += `*–°—Ä–µ–¥–Ω–µ–µ:* ${avg}`;
    }

    await ctx.editMessageText(chartText, { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    });
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö");
  }
}

function getMetricName(metric: string): string {
  const names: Record<string, string> = {
    users: "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    rounds: "–†–∞—É–Ω–¥—ã",
    generations: "–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏",
    revenue: "–î–æ—Ö–æ–¥ (‚≠ê)"
  };
  return names[metric] || metric;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SGR
export async function handleAdminModelSGR(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const useSGR = config.get("useSGR");
  const useExamples = config.get("useExamples");

  const keyboard = new InlineKeyboard()
    .text(useSGR ? "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å SGR" : "üü¢ –í–∫–ª—é—á–∏—Ç—å SGR", "admin_toggle_sgr")
    .row()
    .text(useExamples ? "üìö –ü—Ä–∏–º–µ—Ä—ã: –í–ö–õ" : "üìö –ü—Ä–∏–º–µ—Ä—ã: –í–´–ö–õ", "admin_toggle_examples")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_model");

  await ctx.editMessageText(
    `*üß¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SGR (Structured Generation)*\n\n` +
    `SGR - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ö–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å:\n` +
    `‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏\n` +
    `‚Ä¢ –°—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π\n` +
    `‚Ä¢ Few-shot –ø—Ä–∏–º–µ—Ä–∞–º–∏\n` +
    `‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Mistral\n\n` +
    `–°—Ç–∞—Ç—É—Å SGR: ${useSGR ? "‚úÖ –í–∫–ª—é—á–µ–Ω" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω"}\n` +
    `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã: ${useExamples ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}\n\n` +
    `_–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Mistral 7B_`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

export async function handleAdminToggleSGR(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    const newValue = !config.get("useSGR");
    config.set("useSGR", newValue);
    
    await ctx.answerCallbackQuery(
      newValue ? "‚úÖ SGR —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω" : "‚ùå SGR —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω"
    );
    await handleAdminModelSGR(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
  }
}

export async function handleAdminToggleExamples(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    const newValue = !config.get("useExamples");
    config.set("useExamples", newValue);
    
    await ctx.answerCallbackQuery(
      newValue ? "‚úÖ –ü—Ä–∏–º–µ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã" : "‚ùå –ü—Ä–∏–º–µ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã"
    );
    await handleAdminModelSGR(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
  }
}