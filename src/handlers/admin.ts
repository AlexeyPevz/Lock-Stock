import { Context, InlineKeyboard } from "grammy";
import { ConfigManager } from "../config/manager";
import { logger } from "../utils/logger";
import { SessionFlavor } from "grammy";
import { Session } from "../types";

export interface AdminHandlerDeps {
  adminIds: Set<number>;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export function isAdmin(ctx: Context, deps: AdminHandlerDeps): boolean {
  const userId = ctx.from?.id;
  return userId ? deps.adminIds.has(userId) : false;
}

// –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
export async function handleAdminMenu(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) {
    await ctx.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
    return;
  }

  const keyboard = new InlineKeyboard()
    .text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏", "admin_model")
    .text("üìù –ü—Ä–æ–º–ø—Ç —Å–∏—Å—Ç–µ–º—ã", "admin_prompt")
    .row()
    .text("üéÆ –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "admin_game")
    .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "admin_notifications")
    .row()
    .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats")
    .text("üõ†Ô∏è –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "admin_maintenance")
    .row()
    .text("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "admin_close");

  await ctx.reply(
    "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
export async function handleAdminModel(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const modelConfig = config.getModelConfig();

  const keyboard = new InlineKeyboard()
    .text("ü§ñ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "admin_model_change")
    .text("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "admin_model_temp")
    .row()
    .text("üîÑ –ü–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "admin_model_attempts")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ AI*\n\n` +
    `ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: \`${modelConfig.model}\`\n` +
    `üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${modelConfig.temperature}\n` +
    `üîÑ –ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫: ${modelConfig.maxAttempts}`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
export async function handleAdminModelChange(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const models = [
    { name: "DeepSeek Chat", id: "deepseek/deepseek-chat" },
    { name: "Claude 3 Haiku", id: "anthropic/claude-3-haiku" },
    { name: "GPT-4 Turbo", id: "openai/gpt-4-turbo-preview" },
    { name: "Mixtral 8x7B", id: "mistralai/mixtral-8x7b-instruct" },
    { name: "Llama 3.1 70B", id: "meta-llama/llama-3.1-70b-instruct" },
    { name: "Qwen 2.5 72B", id: "qwen/qwen-2.5-72b-instruct" },
  ];

  const keyboard = new InlineKeyboard();
  
  for (const model of models) {
    keyboard.text(model.name, `admin_set_model:${model.id}`).row();
  }
  
  keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_model");

  await ctx.editMessageText(
    "*–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å AI:*\n\n" +
    "_–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º OpenRouter –∞–∫–∫–∞—É–Ω—Ç–µ_",
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
export async function handleAdminSetModel(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, modelId: string) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    config.set("openRouterModel", modelId);

    await ctx.answerCallbackQuery("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞");
    await handleAdminModel(ctx, deps);
  } catch (error) {
    logger.error("Failed to set model", { error });
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏");
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
export async function handleAdminPrompt(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const currentPrompt = config.get("systemPrompt");
  const isCustom = !!currentPrompt;

  const keyboard = new InlineKeyboard()
    .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", "admin_prompt_edit")
    .text("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π", "admin_prompt_reset")
    .row()
    .text("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π", "admin_prompt_show")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞*\n\n` +
    `–°—Ç–∞—Ç—É—Å: ${isCustom ? "‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π" : "üìÑ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"}\n\n` +
    `_–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ AI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤_`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
export async function handleAdminPromptEdit(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "editing_prompt";
  
  await ctx.editMessageText(
    "*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞*\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n" +
    "_–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel_",
    { parse_mode: "Markdown" }
  );
}

// –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export async function handleAdminGame(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();

  const keyboard = new InlineKeyboard()
    .text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—É–Ω–¥—ã", "admin_game_free")
    .text("üíé –ü—Ä–µ–º–∏—É–º —Ä–∞—É–Ω–¥—ã", "admin_game_premium")
    .row()
    .text("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", "admin_game_verify")
    .row()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*–ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n` +
    `üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤: ${config.get("freeRounds")}\n` +
    `üíé –ü—Ä–µ–º–∏—É–º —Ä–∞—É–Ω–¥–æ–≤: ${config.get("premiumRounds")}\n` +
    `‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ${config.get("verificationEnabled") ? "–í–∫–ª—é—á–µ–Ω–∞" : "–í—ã–∫–ª—é—á–µ–Ω–∞"}`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
export async function handleAdminStats(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
  const keyboard = new InlineKeyboard()
    .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_menu");

  await ctx.editMessageText(
    `*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n` +
    `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: -\n` +
    `üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: -\n` +
    `‚ùì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: -\n` +
    `üíé –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: -\n\n` +
    `_–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î_`,
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–µ
export async function handleAdminTextInput(
  ctx: Context & SessionFlavor<Session>, 
  deps: AdminHandlerDeps
) {
  if (!isAdmin(ctx, deps) || !ctx.session.adminMode || !ctx.message?.text) return false;

  const text = ctx.message.text;
  const mode = ctx.session.adminMode;

  // –û—Ç–º–µ–Ω–∞
  if (text === "/cancel") {
    ctx.session.adminMode = undefined;
    await ctx.reply("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    return true;
  }

  switch (mode) {
    case "editing_prompt":
      try {
        const config = ConfigManager.getInstance();
        config.set("systemPrompt", text);
        ctx.session.adminMode = undefined;
        
        await ctx.reply(
          "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n" +
          "–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
        );
        return true;
      } catch (error) {
        logger.error("Failed to update prompt", { error });
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞");
        return true;
      }

    case "setting_temperature":
      try {
        const temp = parseFloat(text);
        if (isNaN(temp) || temp < 0 || temp > 2) {
          await ctx.reply("‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 2");
          return true;
        }

        const config = ConfigManager.getInstance();
        config.set("temperature", temp);
        ctx.session.adminMode = undefined;
        
        await ctx.reply(`‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${temp}`);
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã");
        return true;
      }

    case "setting_free_rounds":
    case "setting_premium_rounds":
      try {
        const rounds = parseInt(text);
        if (isNaN(rounds) || rounds < 1) {
          await ctx.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
          return true;
        }

        const config = ConfigManager.getInstance();
        const key = mode === "setting_free_rounds" ? "freeRounds" : "premiumRounds";
        config.set(key, rounds);
        ctx.session.adminMode = undefined;
        
        await ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: ${rounds}`);
        return true;
      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤");
        return true;
      }
  }

  return false;
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
export async function handleAdminClose(ctx: Context) {
  await ctx.deleteMessage();
}

export async function handleAdminPromptReset(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    config.set("systemPrompt", undefined);
    
    await ctx.answerCallbackQuery("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π");
    await handleAdminPrompt(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–º–ø—Ç–∞");
  }
}

export async function handleAdminPromptShow(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const config = ConfigManager.getInstance();
  const prompt = config.getSystemPrompt();
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —á–∞—Å—Ç–∏
  const maxLength = 4000;
  if (prompt.length > maxLength) {
    const parts = Math.ceil(prompt.length / maxLength);
    for (let i = 0; i < parts; i++) {
      const start = i * maxLength;
      const end = Math.min(start + maxLength, prompt.length);
      const part = prompt.substring(start, end);
      
      await ctx.reply(
        `*–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—á–∞—Å—Ç—å ${i + 1}/${parts}):*\n\n\`\`\`\n${part}\n\`\`\``,
        { parse_mode: "Markdown" }
      );
    }
  } else {
    await ctx.reply(
      `*–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:*\n\n\`\`\`\n${prompt}\n\`\`\``,
      { parse_mode: "Markdown" }
    );
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
export async function handleAdminModelTemp(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  ctx.session.adminMode = "setting_temperature";
  
  await ctx.editMessageText(
    "*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã*\n\n" +
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å AI:\n" +
    "‚Ä¢ 0.0 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã\n" +
    "‚Ä¢ 0.7 - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n" +
    "‚Ä¢ 2.0 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n" +
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 2:",
    { parse_mode: "Markdown" }
  );
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø—ã—Ç–æ–∫
export async function handleAdminModelAttempts(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps) {
  if (!isAdmin(ctx, deps)) return;

  const keyboard = new InlineKeyboard();
  
  for (let i = 1; i <= 10; i++) {
    keyboard.text(i.toString(), `admin_set_attempts:${i}`);
    if (i % 5 === 0) keyboard.row();
  }
  
  keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "admin_model");

  await ctx.editMessageText(
    "*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*\n\n" +
    "–ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ø—Ä–æ–±—É–µ—Ç –µ—â–µ —Ä–∞–∑.\n" +
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:",
    { 
      parse_mode: "Markdown",
      reply_markup: keyboard 
    }
  );
}

export async function handleAdminSetAttempts(ctx: Context & SessionFlavor<Session>, deps: AdminHandlerDeps, attempts: number) {
  if (!isAdmin(ctx, deps)) return;

  try {
    const config = ConfigManager.getInstance();
    config.set("maxAttempts", attempts);
    
    await ctx.answerCallbackQuery(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: ${attempts}`);
    await handleAdminModel(ctx, deps);
  } catch (error) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ø—ã—Ç–æ–∫");
  }
}