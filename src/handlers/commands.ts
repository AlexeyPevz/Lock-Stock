import { Context } from "grammy";
import { Session } from "../types";
import { logger } from "../utils/logger";
import { loadPack, shuffleInPlace } from "../content/provider";
import { generateOneRound } from "../generation/generator";
import { ensureFactsAndRound } from "../db/upsert";
import { verifyWithWikipedia } from "../verification/wiki";
import { getQualityReport, recomputeFactRatings, quarantineLowQualityFacts } from "../db/quality";
import Database from "better-sqlite3";

export interface CommandHandlerDeps {
  db: Database.Database;
  sessions: Map<number, Session>;
  adminIds: Set<number>;
  contentPackPath: string;
  freeRounds: number;
  premiumRounds: number;
}

export async function handleStart(ctx: Context): Promise<void> {
  logger.info("Start command", logger.fromContext(ctx));
  await ctx.reply(
    [
      "üé≤ Lock Stock Question Bot",
      "",
      "–ü–æ–º–æ–≥–∞—é –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ—Ñ–ª–∞–π–Ω-–∏–≥—Ä—É –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Lock Stock:",
      "‚Ä¢ –ß–∏—Å–ª–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –¥–≤–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏",
      "‚Ä¢ –í–µ–¥—É—â–∏–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏—Ö –ø–æ –∫–Ω–æ–ø–∫–∞–º",
      "‚Ä¢ –û—Ç–≤–µ—Ç ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000",
      "",
      "–ö–æ–º–∞–Ω–¥—ã:",
      "/newgame ‚Äî –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É",
      "/rules ‚Äî –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã",
      "/premium ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–µ",
      "/help ‚Äî –ü–æ–º–æ—â—å",
    ].join("\n")
  );
}

export async function handleRules(ctx: Context): Promise<void> {
  logger.info("Rules command", logger.fromContext(ctx));
  await ctx.reply(
    [
      "üìã –ü—Ä–∞–≤–∏–ª–∞ Lock Stock:",
      "",
      "1. –í—Å–µ –¥–µ–ª–∞—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É",
      "2. –ó–∞–ø–∏—Å—ã–≤–∞—é—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ (–±–æ–ª—å—à–µ –Ω–µ –º–µ–Ω—è—é—Ç)",
      "3. –¢–æ—Ä–≥–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏:",
      "   ‚Ä¢ –†–µ–π–∑ ‚Äî –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É",
      "   ‚Ä¢ –ß–µ–∫ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—Å–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É",
      "   ‚Ä¢ –ü–∞—Å ‚Äî –≤—ã–π—Ç–∏ –∏–∑ –±–∞–Ω–∫–∞",
      "4. –í –∫–æ–Ω—Ü–µ –≤–µ–¥—É—â–∏–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç",
      "5. –ü–æ–±–µ–∂–¥–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É",
      "",
      "–ë–æ—Ç –Ω–µ —Å—á–∏—Ç–∞–µ—Ç –æ—á–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ –∏–≥—Ä—É!",
    ].join("\n")
  );
}

export async function handlePremium(ctx: Context): Promise<void> {
  logger.info("Premium command", logger.fromContext(ctx));
  await ctx.reply(
    [
      "‚≠ê –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø:",
      "",
      "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 —Ä–∞—É–Ω–¥–æ–≤ –Ω–∞ —Å–µ—Å—Å–∏—é",
      "–ü—Ä–µ–º–∏—É–º: 15 —Ä–∞—É–Ω–¥–æ–≤ –∑–∞ 100 Stars",
      "",
      "–°–∫–æ—Ä–æ:",
      "‚Ä¢ –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–∏ (—Å–ø–æ—Ä—Ç, –∫–∏–Ω–æ, –∏—Å—Ç–æ—Ä–∏—è)",
      "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
      "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä",
      "",
      "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Telegram Stars!",
    ].join("\n")
  );
}

export async function handleHelp(ctx: Context): Promise<void> {
  logger.info("Help command", logger.fromContext(ctx));
  await ctx.reply(
    [
      "‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:",
      "",
      "–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ—Ñ–ª–∞–π–Ω-–∏–≥—Ä—É Lock Stock.",
      "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫–æ–º–ø–∞–Ω–∏–µ–π, –±–æ—Ç –≤—ã–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã.",
      "",
      "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:",
      "1. –ù–∞–∂–º–∏—Ç–µ /newgame",
      "2. –ü–æ–∫–∞–∂–∏—Ç–µ —ç–∫—Ä–∞–Ω –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º",
      "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫",
      "4. –í–∫–ª—é—á–∞–π—Ç–µ —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π",
      "5. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞",
      "",
      "–í–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å ‚Äî –æ—Ç–≤–µ—Ç—ã —Å–∫—Ä—ã—Ç—ã –¥–æ –Ω–∞–∂–∞—Ç–∏—è!",
    ].join("\n")
  );
}

export async function handleNewGame(ctx: Context, deps: CommandHandlerDeps): Promise<void> {
  const chatId = ctx.chat?.id;
  if (!chatId) return;

  logger.info("New game command", { ...logger.fromContext(ctx), chatId });

  try {
    const pack = loadPack(deps.contentPackPath);
    const limitedPack = pack.slice(0, deps.premiumRounds);
    
    const session: Session = {
      chatId,
      rounds: shuffleInPlace(limitedPack),
      currentIndex: 0,
      revealed: {},
      freeLimit: deps.freeRounds,
      premiumTotal: deps.premiumRounds,
      isPremium: false,
      skipsUsed: 0,
    };

    // Ensure DB ids for feedback/seen tracking
    session.roundIds = {};
    for (let i = 0; i < session.rounds.length; i++) {
      const roundId = ensureFactsAndRound(deps.db, session.rounds[i]);
      session.roundIds[i] = roundId;
    }

    deps.sessions.set(chatId, session);

    await ctx.reply(
      [
        "üéØ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!",
        `–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: ${session.freeLimit} (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)`,
        "",
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥.",
      ].join("\n"),
      {
        reply_markup: {
          inline_keyboard: [[{ text: "–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥ 1", callback_data: "round:next" }]],
        },
      }
    );
  } catch (error: any) {
    logger.error("Error creating new game", { ...logger.fromContext(ctx), error });
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

export async function handleGenerate(ctx: Context, deps: CommandHandlerDeps): Promise<void> {
  const userId = ctx.from?.id;
  if (!userId || !deps.adminIds.has(userId)) return;

  const args = ctx.message?.text?.split(" ") || [];
  const count = Math.min(Number(args[1]) || 1, 10);

  logger.info("Generate command", { ...logger.fromContext(ctx), count });

  await ctx.reply(`–ì–µ–Ω–µ—Ä–∏—Ä—É—é ${count} —Ä–∞—É–Ω–¥–æ–≤...`);

  let generated = 0;
  let verified = 0;

  for (let i = 0; i < count; i++) {
    try {
      const gen = await generateOneRound();
      const bundle = {
        number: gen.answer,
        question: { id: `gen-q-${Date.now()}-${i}`, number: gen.answer, domain: gen.question.domain, text: gen.question.text, sourceUrl: gen.question.source_url },
        hint1: { id: `gen-h1-${Date.now()}-${i}`, number: gen.answer, domain: gen.hint1.domain, text: gen.hint1.text, sourceUrl: gen.hint1.source_url },
        hint2: { id: `gen-h2-${Date.now()}-${i}`, number: gen.answer, domain: gen.hint2.domain, text: gen.hint2.text, sourceUrl: gen.hint2.source_url },
      } as const;

      const roundId = ensureFactsAndRound(deps.db, bundle);
      generated++;

      // Verify using provided sources when available
      const q = await verifyWithWikipedia(bundle.question.text, bundle.question.sourceUrl);
      const h1 = await verifyWithWikipedia(bundle.hint1.text, bundle.hint1.sourceUrl);
      const h2 = await verifyWithWikipedia(bundle.hint2.text, bundle.hint2.sourceUrl);

      if (q.ok && h1.ok && h2.ok) {
        deps.db.prepare("UPDATE rounds SET verified = 1 WHERE id = ?").run(roundId);
        verified++;
      }
    } catch (error: any) {
      logger.error("Error generating round", { ...logger.fromContext(ctx), error, iteration: i });
    }
  }

  await ctx.reply(`–ì–æ—Ç–æ–≤–æ! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${generated}, –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: ${verified}`);
}

export async function handleQuality(ctx: Context, deps: CommandHandlerDeps): Promise<void> {
  const userId = ctx.from?.id;
  if (!userId || !deps.adminIds.has(userId)) return;

  logger.info("Quality command", logger.fromContext(ctx));

  const report = getQualityReport(deps.db);

  await ctx.reply(
    [
      "üìä –û—Ç—á—ë—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É:",
      `–í—Å–µ–≥–æ —Ñ–∞–∫—Ç–æ–≤: ${report.totals.facts}`,
      `–í –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ: ${report.totals.quarantined}`,
      `–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${report.totals.avg_rating?.toFixed(2) || "-"}`,
      "",
      "–•—É–¥—à–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:",
      ...report.worst.map((w) => `- ${w.id} (#${w.number}, ${w.domain}) = ${w.rating ?? "-"}`),
    ].join("\n")
  );
}

export async function handleRecalc(ctx: Context, deps: CommandHandlerDeps): Promise<void> {
  const userId = ctx.from?.id;
  if (!userId || !deps.adminIds.has(userId)) return;

  logger.info("Recalc command", logger.fromContext(ctx));

  recomputeFactRatings(deps.db);
  quarantineLowQualityFacts(deps.db);

  await ctx.reply("–†–µ–π—Ç–∏–Ω–≥ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω, –∫–∞—Ä–∞–Ω—Ç–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω");
}