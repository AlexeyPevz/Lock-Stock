import { Context } from "grammy";
import { Session } from "../types";

export interface PaymentsDeps {
	sessions: Map<number, Session>;
	bot: any;
	premiumPriceStars: number;
	premiumTotalRounds: number;
}

export async function handlePremiumInfo(ctx: Context, deps: PaymentsDeps): Promise<void> {
	const chatId = ctx.chat?.id;
	if (!chatId) return;

	const session = deps.sessions.get(chatId);
	const isPremium = session?.isPremium === true;
	const freeRounds = session?.freeLimit ?? 20;
	const totalRounds = isPremium ? session?.premiumTotal ?? deps.premiumTotalRounds : freeRounds;

	await ctx.reply(
		[
			"‚≠ê –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø:",
			"",
			`–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ: ${totalRounds} —Ä–∞—É–Ω–¥–æ–≤${isPremium ? " (–ø—Ä–µ–º–∏—É–º)" : " (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"}`,
			`–ü—Ä–µ–º–∏—É–º –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ ${deps.premiumTotalRounds} —Ä–∞—É–Ω–¥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏`,
			"",
			process.env.ENABLE_STARS === "1"
				? `–¶–µ–Ω–∞: ${deps.premiumPriceStars}‚≠ê (Telegram Stars)`
				: "–û–ø–ª–∞—Ç–∞ Stars –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞",
		].join("\n"),
		{
			reply_markup: {
				inline_keyboard: [
					[
						{ text: isPremium ? "–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω" : (process.env.ENABLE_STARS === "1" ? "–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º" : "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º"), callback_data: "premium:buy" },
					],
				],
			},
		}
	);
}

export async function handlePremiumBuy(ctx: Context, deps: PaymentsDeps): Promise<void> {
	const chatId = ctx.chat?.id;
	if (!chatId) {
		await ctx.answerCallbackQuery();
		return;
	}

	const session = deps.sessions.get(chatId);
	if (!session) {
		await ctx.answerCallbackQuery({ text: "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /newgame" });
		return;
	}

	if (session.isPremium) {
		await ctx.answerCallbackQuery({ text: "–ü—Ä–µ–º–∏—É–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" });
		return;
	}

	// Fallback: if Stars are disabled, activate immediately
	if (process.env.ENABLE_STARS !== "1") {
		session.isPremium = true;
		session.premiumTotal = deps.premiumTotalRounds;
		await ctx.answerCallbackQuery({ text: "–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" });
		await ctx.reply("üéâ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ —Ä–∞—É–Ω–¥–æ–≤!");
		return;
	}

	// Stars flow: send invoice (currency XTR)
	try {
		await deps.bot.api.sendInvoice(
			chatId,
			"–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø",
			`–û—Ç–∫—Ä–æ–µ—Ç –¥–æ ${deps.premiumTotalRounds} —Ä–∞—É–Ω–¥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏`,
			`premium-${chatId}-${Date.now()}`,
			"",
			"XTR",
			[
				{ label: "–ü—Ä–µ–º–∏—É–º", amount: deps.premiumPriceStars },
			],
			{
				need_name: false,
				need_phone_number: false,
				need_shipping_address: false,
				is_flexible: false,
			}
		);
		await ctx.answerCallbackQuery();
	} catch (e: any) {
		await ctx.answerCallbackQuery({ text: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç" });
		await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
	}
}

export async function handlePreCheckout(ctx: any): Promise<void> {
	try {
		await ctx.answerPreCheckoutQuery(true);
	} catch {
		// ignore
	}
}

export async function handleSuccessfulPayment(ctx: any, deps: PaymentsDeps): Promise<void> {
	const chatId = ctx.chat?.id;
	if (!chatId) return;

	const session = deps.sessions.get(chatId);
	if (session) {
		session.isPremium = true;
		session.premiumTotal = deps.premiumTotalRounds;
	}
	await ctx.reply("üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
	try {
		const { getStatsCollector } = await import("../stats/collector");
		getStatsCollector().logEvent("payment_successful", ctx.from?.id, chatId, {
			package_id: "premium_session",
			price_stars: deps.premiumPriceStars,
		});
	} catch {}
}